Array variableSubclass: #Board	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Games'!!Board methodsFor: 'as yet unclassified' stamp: 'cfoch 11/18/2013 22:49'!printBoard	| size element |	size := self size.	1 to: size do: [ :row |		1 to: size do: [ :col |			element := (self at: row) at: col.			(element = -1)			ifTrue: [Transcript show: '-']			ifFalse: [Transcript show: element].			Transcript tab.			].		Transcript cr.		].	Transcript cr	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Board class	instanceVariableNames: ''!!Board class methodsFor: 'as yet unclassified' stamp: 'cfoch 11/18/2013 22:36'!new: size	| b |	b := self basicNew: size.	1 to: size do: [ :row |		b at: row put: (Array new: size withAll: -1)].	^b.! !Object subclass: #KnightsTour	instanceVariableNames: 'movementNumber solutionsNumber xMove yMove size board'	classVariableNames: ''	poolDictionaries: ''	category: 'Games'!!KnightsTour methodsFor: 'as yet unclassified' stamp: 'cfoch 11/19/2013 16:59'!getSolutionsNumber	^solutionsNumber! !!KnightsTour methodsFor: 'as yet unclassified' stamp: 'cfoch 11/19/2013 16:57'!run: showSolution row: row col: col	self solve: 0 row: row col: col showSolution: showSolution! !!KnightsTour methodsFor: 'as yet unclassified' stamp: 'cfoch 11/20/2013 12:46'!safe: myboard row: row col: col	((row < 1) or: (col < 1) or: (row > size) or: (col > size)) "Out of board"	ifTrue: [^false] 	ifFalse: [		^ (((myboard at: row) at: col) = -1) "Empty square"		]! !!KnightsTour methodsFor: 'as yet unclassified' stamp: 'cfoch 11/19/2013 19:55'!setSize: n	board := Board new: n.	xMove := #(-2 -1 1 2 2 1 -1 -2).	yMove := #(-1 -2 -2 -1 1 2 2 1).	movementNumber := 0.	solutionsNumber := 0.	size := n.! !!KnightsTour methodsFor: 'as yet unclassified' stamp: 'cfoch 11/20/2013 15:03'!showBoard	board printBoard! !!KnightsTour methodsFor: 'as yet unclassified' stamp: 'cfoch 11/20/2013 15:54'!solve: movementNumber row:row col: col showSolution: showSolution	(movementNumber > (size squared))	ifTrue: [		solutionsNumber := solutionsNumber + 1.		showSolution ifTrue: [			Transcript show: 'SOLUTION: ', solutionsNumber; cr.			board printBoard			].		^ true		]	ifFalse: [		1 to: 8 do: [ :n |			(self safe: board row: row col: col) ifTrue: [				(board at: row) at: col put: (movementNumber + 1).				(self solve: (movementNumber + 1) row: (row + yMove at: n) col: (col + xMove at: n) showSolution: showSolution) ifTrue: [^true].				(board at: row) at: col put: -1.				]			].		^false		].! !Object subclass: #NQueensGame	instanceVariableNames: 'n solution solutions'	classVariableNames: ''	poolDictionaries: ''	category: 'Games'!!NQueensGame methodsFor: 'as yet unclassified' stamp: 'cfoch 11/18/2013 10:03'!getSolutions	^ solutions! !!NQueensGame methodsFor: 'as yet unclassified' stamp: 'cfoch 11/18/2013 23:05'!printSolution: solution	| board row |	board := Board new: n.	1 to: n do: [ :col |		row := solution at: col.		(board at: row) at: col put: 'Q'		].! !!NQueensGame methodsFor: 'as yet unclassified' stamp: 'cfoch 11/18/2013 10:14'!run: showSolutions	self solve: 1 showSolution: showSolutions.! !!NQueensGame methodsFor: 'as yet unclassified' stamp: 'cfoch 11/18/2013 09:46'!safe: solution rowA: rowA colA: colA	| rowB |	1 to: (colA - 1) do: [ :colB |		rowB := solution at: colB.		(((rowB - rowA) abs = (colB - colA) abs) or: (rowB = rowA)) ifTrue: [^false]		].	^true! !!NQueensGame methodsFor: 'as yet unclassified' stamp: 'cfoch 11/18/2013 10:09'!setSize: size	n := size.	solution := (1 to: size) collect: [ :i | -1]. "solution := #(-1 -1 -1 -1 -1 ...) n times"	solutions := 0.! !!NQueensGame methodsFor: 'as yet unclassified' stamp: 'cfoch 11/18/2013 23:08'!solutionToBoard: solution	| board row |	board := Board new: n.	1 to: n do: [ :col |		row := solution at: col.		(board at: row) at: col put: 'Q'		].	^board! !!NQueensGame methodsFor: 'as yet unclassified' stamp: 'cfoch 11/19/2013 16:51'!solve: col showSolution: showSolution	(col > n)	ifTrue: [		| board |		solutions := solutions + 1.		board := self solutionToBoard: solution.		showSolution ifTrue: [			Transcript show: 'SOLUTION: ', solutions; cr.			board printBoard.			]		]	ifFalse: [		1 to: n do: [ :row |			(self safe: solution rowA: row colA: col) ifTrue: [				solution at: col put: row.				(self solve: (col + 1) showSolution: showSolution).				solution at: col put: -1				]			].		]! !Object subclass: #TowerOfBrahma	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Games'!!TowerOfBrahma methodsFor: 'as yet unclassified' stamp: 'cfoch 11/17/2013 16:35'!moveDisk: fromPin to: toPin	Transcript cr.	Transcript show: (fromPin printString, '->', toPin printString).! !!TowerOfBrahma methodsFor: 'as yet unclassified' stamp: 'cfoch 11/17/2013 16:33'!moveTower: height from: fromPin to: toPin using: usingPin	(height > 0) ifTrue: [		self moveTower: (height - 1) from: fromPin to: usingPin using: toPin.		self moveDisk: fromPin  to: toPin.		self moveTower: (height - 1) from: usingPin to: toPin using: fromPin]! !